<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://camel.apache.org/schema/cxf
       http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/jdbc
       http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://cxf.apache.org/jaxrs
       http://cxf.apache.org/schemas/jaxrs.xsd
            ">

	<context:component-scan base-package="in.misk" />
	<!-- Start the embedded database -->
	<jdbc:embedded-database id="embedded" type="DERBY" />

	<!-- Define a datasource using the embedded database. -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
		<property name="url" value="jdbc:derby:database/todo;create=false" />
		<property name="username" value="app" />
		<property name="password" value="app" />
	</bean>

	<!-- If enabled is set to true, initialise the database base with the specified 
		SQL. -->
	<jdbc:initialize-database data-source="dataSource"
		enabled="false">
		<jdbc:script location="classpath:schema.sql" />
	</jdbc:initialize-database>

	<!-- Define the hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">

		<!-- Use the previously configured datasource -->
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>

		<!-- Tell hibernate what SQL dialect to use. -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.DerbyDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
			</props>
		</property>

		<!-- Auto-scan packages for annotates entities. -->
		<property name="packagesToScan" value="in.misk.dao.entities" />
	</bean>

	<!-- Set up a transaction manager using the Hibernate session factory. -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- enable the configuration of transaction behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="cors-filter"
		class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter" />

	<jaxrs:server id="service" address="/">
		<jaxrs:serviceBeans>
			<ref bean="todoListResource" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="cors-filter" />
		</jaxrs:providers>
	</jaxrs:server>


	<!-- Start the camel context and start all routes that extends SpringRouteBuilder -->
	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<contextScan />
	</camelContext>

</beans>
